<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <autogenerated />
<#  foreach(var ns in Factory.GetRequiredNamespaces()) {  #>
using <#= ns #>;
<#  }  #>

namespace <#= Factory.NameSpace #>
{
    <#= Factory.GetAccessibility() #> partial class <#= Factory.TypeName #> : <#= Factory.InterfaceName #>
<#  if(Factory.DoSupportGenericHost) { #>
        , IDeprovgenFactory
<# } #>
    {
<#  foreach(var dependency in Factory.Dependencies) { #>
        private readonly <#= dependency.TypeName #> <#= dependency.FieldName #>;
<#  } #>
<#  foreach(var capture in Factory.Captures) {  #>
        public <#= capture.InterfaceName #> <#= capture.PropertyName #> { get; }
<#  }  #>

<#  foreach(var resolver in Factory.Resolvers.Where(x => !x.IsTransient)) {  #>
        private <#= resolver.ServiceType.TypeName #>? <#= resolver.CacheVarName #>;
<#  } #>

        public <#= Factory.TypeName #>(<#= Factory.GetConstructorParameterList() #>)
        {
<#  foreach(var dependency in Factory.Dependencies) { #>
            <#= dependency.FieldName #> = <#= dependency.ParameterName #>;
<#  } #>
<#  foreach(var capture in Factory.Captures) { #>
            <#= capture.PropertyName #> = <#= capture.ParameterName #>;
<#  }  #>
        }
<#  foreach(var resolver in Factory.Resolvers){ #>

        public <#= resolver.ReturnType.Name #> <#= resolver.MethodName #>(<#= resolver.GetParameterList() #>)
        {
<#      if(resolver.IsTransient) { #>
            return new <#= resolver.ServiceType.TypeName #>(<#= resolver.ServiceType.GetConstructorArgList(resolver.Parameters, Factory) #>);
<#      } else { #>
            return <#= resolver.CacheVarName #> ??= new <#= resolver.ServiceType.TypeName #>(<#= resolver.ServiceType.GetConstructorArgList(resolver.Parameters, Factory) #>);
<#      }  #>
        }
<#  } #>
<#  if(Factory.DoSupportGenericHost) {  #>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddTransient<<#= Factory.TypeName #>>(provider => this);
<#      foreach(var resolver in Factory.Resolvers.Where(x => x.Parameters.Length == 0)) {  #>
            services.AddTransient<<#= resolver.ReturnType.Name #>>(provider => <#= resolver.MethodName #>());
<#      }  #>
        }
<#  }  #>
    }
}