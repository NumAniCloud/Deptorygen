// <autogenerated />
using System;
using Deprovgen.Try.Interface;

namespace Deprovgen.Try
{
    internal partial class ServiceLocatorFuga : IServiceLocatorFuga
    {
        private readonly Service _service;
        private readonly Service3 _service3;

        private Fuga? _resolveFugaCache;
        private Iron? _resolveIronCache;

        public ServiceLocatorFuga(Service service, Service3 service3)
        {
            _service = service;
            _service3 = service3;
        }

        public Fuga ResolveFuga()
        {
            return _resolveFugaCache ??= new Fuga(_service, _service3);
        }

        public IServiceIron ResolveIron(Service3 service3)
        {
            return _resolveIronCache ??= new Iron(service3);
        }

        public ServiceLocator ResolveServiceLocator(Service2 service2)
        {
            return new ServiceLocator(_service, service2, _service3);
        }
    }

    internal static class ServiceLocatorFugaExtensions
    {
        public static ServiceLocator ResolveServiceLocator(this IServiceLocatorFuga self, Service2 service2)
        {
            return self is ServiceLocatorFuga concrete ? concrete.ResolveServiceLocator(service2)
                : throw new NotImplementedException("このメソッドは ServiceLocatorFuga クラスに対してのみ呼び出せます。");
        }
    }
}