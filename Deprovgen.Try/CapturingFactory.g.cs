// <autogenerated />
using System;
using System.Collections.Generic;

namespace Deprovgen.Try
{
    internal partial class CapturingFactory : ICapturingFactory
        , IDisposable
    {
        public IFactory Factory { get; }

        private Client2? _ResolveClient2Cache;

        public CapturingFactory(IFactory factory)
        {
            Factory = factory;
        }

        public Client2 ResolveClient2()
        {
            return _ResolveClient2Cache ??= new Client2(ResolveServices(ResolveServiceB()));
        }

        public ServiceA ResolveServiceAAsTransient()
        {
            return Factory.ResolveServiceAAsTransient();
        }

        public ServiceB ResolveServiceB()
        {
            return Factory.ResolveServiceB();
        }

        public ServiceC ResolveServiceC()
        {
            return Factory.ResolveServiceC();
        }

        public Client ResolveClient()
        {
            return Factory.ResolveClient();
        }

        public IEnumerable<IService> ResolveServices(ServiceB b)
        {
            return new IService[]
            {
                ResolveServiceAAsTransient(),
				b,
				ResolveServiceC()
            };
        }

        
        public void Dispose()
        {
        }
    }
}