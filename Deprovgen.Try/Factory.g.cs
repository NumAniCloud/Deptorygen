// <autogenerated />
using System;
using System.Collections.Generic;

namespace Deprovgen.Try
{
    internal partial class Factory : IFactory
        , IDisposable
    {

        private ServiceB? _ResolveServiceBCache;
        private ServiceC? _ResolveServiceCCache;
        private Client? _ResolveClientCache;

        public Factory()
        {
        }

        public ServiceA ResolveServiceAAsTransient()
        {
            return new ServiceA();
        }

        public ServiceB ResolveServiceB()
        {
            return _ResolveServiceBCache ??= new ServiceB();
        }

        public ServiceC ResolveServiceC()
        {
            return _ResolveServiceCCache ??= new ServiceC();
        }

        public Client ResolveClient()
        {
            return _ResolveClientCache ??= new Client(ResolveServices(ResolveServiceB()));
        }

        public IEnumerable<IService> ResolveServices(ServiceB b)
        {
            return new IService[]
            {
                ResolveServiceAAsTransient(),
				b,
				ResolveServiceC()
            };
        }

        
        public void Dispose()
        {
            _ResolveServiceBCache?.Dispose();
            _ResolveServiceCCache?.Dispose();
        }
    }
}