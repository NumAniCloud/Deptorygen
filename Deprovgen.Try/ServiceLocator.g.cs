// <autogenerated />
using System;
using Deprovgen.GenericHost;
using Microsoft.Extensions.DependencyInjection;

namespace Deprovgen.Try
{
    internal partial class ServiceLocator : IServiceLocator
        , IDeprovgenFactory
    {
        private readonly Service2 _service2;
        public ICapturedFactory Captured { get; }

        private Hoge? _resolveHogeCache;
        private Piyo? _resolvePiyoCache;

        public ServiceLocator(Service2 service2, ICapturedFactory captured)
        {
            _service2 = service2;
            Captured = captured;
        }

        public Hoge ResolveHoge()
        {
            return _resolveHogeCache ??= new Hoge(Captured.ResolveService(), _service2);
        }

        public Piyo ResolvePiyo()
        {
            return _resolvePiyoCache ??= new Piyo(ResolveHoge(), Captured.ResolveService());
        }
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddTransient<Hoge>(provider => ResolveHoge());
            services.AddTransient<Piyo>(provider => ResolvePiyo());
        }
    }

}