// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using Deptorygen.GenericHost;
using Microsoft.Extensions.DependencyInjection;

namespace UseDeptorygen.Samples.CollectionGenericHost
{
	internal partial class Factory : IFactory
		, IDisposable
		, IDeptorygenFactory
	{
		private ServiceA? _ResolveServiceACache;
		private ServiceB? _ResolveServiceBCache;
		private ServiceC? _ResolveServiceCCache;
		private Client? _ResolveClientCache;

		public Factory()
		{
		}

		public ServiceA ResolveServiceA()
		{
			return _ResolveServiceACache ??= new ServiceA();
		}

		public ServiceB ResolveServiceB()
		{
			return _ResolveServiceBCache ??= new ServiceB();
		}

		public ServiceC ResolveServiceC()
		{
			return _ResolveServiceCCache ??= new ServiceC();
		}

		public Client ResolveClient()
		{
			return _ResolveClientCache ??= new Client(ResolveServices());
		}

		public IEnumerable<Service> ResolveServices()
		{
			return new Service[]
			{
				ResolveServiceA(),
				ResolveServiceB(),
				ResolveServiceC()
			};
		}

		public void ConfigureServices(IServiceCollection services)
		{
			services.AddTransient<IFactory>(provider => this);
			services.AddTransient<ServiceA>(provider => ResolveServiceA());
			services.AddTransient<ServiceB>(provider => ResolveServiceB());
			services.AddTransient<ServiceC>(provider => ResolveServiceC());
			services.AddTransient<Client>(provider => ResolveClient());
			services.AddTransient<Service>(provider => ResolveServiceA());
			services.AddTransient<Service>(provider => ResolveServiceB());
			services.AddTransient<Service>(provider => ResolveServiceC());
		}

		public void Dispose()
		{
		}
	}
}