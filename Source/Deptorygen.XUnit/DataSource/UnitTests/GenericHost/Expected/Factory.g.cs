// <autogenerated />
#nullable enable
using System;
using System.Collections.Generic;
using Deptorygen.GenericHost;
using Microsoft.Extensions.DependencyInjection;

namespace UseDeptorygen.Samples.GenericHost
{
	internal partial class Factory : IFactory
		, IDisposable
		, IDeptorygenFactory
	{
		private Service? _ResolveServiceCache;
		private Service2? _ResolveService2Cache;
		private Client? _ResolveClientCache;

		public Factory()
		{
		}

		public Service ResolveService()
		{
			return _ResolveServiceCache ??= new Service();
		}

		public Service2 ResolveService2()
		{
			return _ResolveService2Cache ??= new Service2();
		}

		public Client ResolveClient()
		{
			return _ResolveClientCache ??= new Client(ResolveService(), ResolveService2());
		}

		public void ConfigureServices(IServiceCollection services)
		{
			services.AddTransient<IFactory>(provider => this);
			services.AddTransient<Service>(provider => ResolveService());
			services.AddTransient<Service2>(provider => ResolveService2());
			services.AddTransient<Client>(provider => ResolveClient());
		}

		public void Dispose()
		{
		}
	}
}