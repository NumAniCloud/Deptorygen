<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Deptorygen.Utilities" #>
<#@ output extension=".cs" #>
// <autogenerated />
#nullable enable
<#  foreach(var ns in Factory.GetRequiredNamespaces()) {  #>
using <#= ns #>;
<#  }  #>

namespace <#= Factory.NameSpace #>
{
	<#= Factory.GetAccessibility() #> partial class <#= Factory.TypeName #> : <#= Factory.InterfaceName #>
		, IDisposable
<#  if(Factory.DoSupportGenericHost) {  #>
		, IDeptorygenFactory
<#  }  #>
	{
<#  // 依存先フィールド #>
<#  if(Factory.Dependencies.Any()) {  #>
<#      foreach(var dependency in Factory.Dependencies) { #>
		private readonly <#= dependency.Name #> _<#= dependency.LowerCamelCase #>;
<#      } #>

<#  }  #>
<#  // キャプチャプロパティ #>
<#  if(Factory.Captures.Any()) { #>
<#      foreach(var capture in Factory.Captures) {  #>
		public <#= capture.InterfaceName #> <#= capture.PropertyName #> { get; }
<#      }  #>

<#  }  #>
<#  // キャッシュ #>
<#  if(Factory.Resolvers.Any()) { #>
<#      foreach(var resolver in Factory.Resolvers) {
			if(!resolver.IsTransient && !resolver.TryGetDelegation(Factory, out var dummy)) { #>
		private <#= resolver.ResolutionName #>? <#= resolver.CacheVarName #>;
<#          } #>
<#      } #>

<#  }  #>
<#  // コンストラクタ #>
		public <#= Factory.TypeName #>(<#= Factory.GetConstructorParameterList() #>)
		{
<#  foreach(var dependency in Factory.Dependencies) { #>
			_<#= dependency.LowerCamelCase #> = <#= dependency.LowerCamelCase #>;
<#  } #>
<#  foreach(var capture in Factory.Captures) { #>
			<#= capture.PropertyName #> = <#= capture.ParameterName #>;
<#  }  #>
		}

<#  // リゾルバー #>
<#  if(Factory.Resolvers.Any()) { #>
<#      foreach(var (resolver, isLast) in Factory.Resolvers.WithFooterFlag()) { #>
		public <#= resolver.ReturnType.Name #> <#= resolver.MethodName #>(<#= resolver.GetParameterList() #>)
		{
<#          if(resolver.IsTransient || resolver.IsAlternatedByCapture(Factory)) { #>
			return <#= resolver.Resolution.GetInstantiation(resolver, Factory) #>;
<#          } else { #>
			return <#= resolver.CacheVarName #> ??= <#= resolver.Resolution.GetInstantiation(resolver, Factory) #>;
<#          }  #>
		}
<#			if(!isLast) { #>

<#			} #>
<#      } #>

<#  }  #>
<#  // コレクションリゾルバー #>
<#  if(Factory.CollectionResolvers.Any()) { #>
<#      foreach(var resolver in Factory.CollectionResolvers) { #>
		public IEnumerable<<#= resolver.ElementTypeName #>> <#= resolver.MethodName #>(<#= resolver.GetParameterList() #>)
		{
			return new <#= resolver.ElementTypeName #>[]
			{
				<#= resolver.GetElementList(Factory.Injection) #>
			};
		}
<#      }  #>

<#  }  #>
<#  // GenericHostサポート #>
<#  if(Factory.DoSupportGenericHost) {  #>
		public void ConfigureServices(IServiceCollection services)
		{
			services.AddTransient<<#= Factory.InterfaceName #>>(provider => this);
<#      foreach(var item in Factory.GetResolverExpressionsForGenericHost()) {  #>
			services.AddTransient<<#= item.typeName #>>(provider => <#= item.expression #>);
<#      }  #>
<#		foreach(var item in Factory.GetCollectionResolverExpressionsForGenericHost()) {  #>
<#			foreach(var exp in item.expressions) {  #>
			services.AddTransient<<#= item.typeName #>>(provider => <#= exp #>);
<#			}  #>
<#		}  #>
		}

<#  }  #>
<#  // Dispose #>
		public void Dispose()
		{
<#  foreach(var resolver in Factory.Resolvers) {
		if(resolver.GetRequireDispose(Factory)) { #>
			<#= resolver.CacheVarName #>?.Dispose();
<#      }
	} #>
		}
	}
}