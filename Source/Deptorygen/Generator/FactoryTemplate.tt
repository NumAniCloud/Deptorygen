<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <autogenerated />
<#  foreach(var ns in Factory.GetRequiredNamespaces()) {  #>
using <#= ns #>;
<#  }  #>

namespace <#= Factory.NameSpace #>
{
    <#= Factory.GetAccessibility() #> partial class <#= Factory.TypeName #> : <#= Factory.InterfaceName #>
        , IDisposable
<#  if(Factory.DoSupportGenericHost) {  #>
        , IDeptorygenFactory
<#  }  #>
    {
<#  foreach(var dependency in Factory.Dependencies) { #>
        private readonly <#= dependency.Name #> _<#= dependency.LowerCamelCase #>;
<#  } #>
<#  foreach(var capture in Factory.Captures) {  #>
        public <#= capture.InterfaceName #> <#= capture.PropertyName #> { get; }
<#  }  #>

<#  foreach(var resolver in Factory.Resolvers) {
        if(!resolver.IsTransient && !resolver.TryGetDelegation(Factory, out var dummy)) { #>
        private <#= resolver.ResolutionName #>? <#= resolver.CacheVarName #>;
<#      }
    } #>

        public <#= Factory.TypeName #>(<#= Factory.GetConstructorParameterList() #>)
        {
<#  foreach(var dependency in Factory.Dependencies) { #>
            _<#= dependency.LowerCamelCase #> = <#= dependency.LowerCamelCase #>;
<#  } #>
<#  foreach(var capture in Factory.Captures) { #>
            <#= capture.PropertyName #> = <#= capture.ParameterName #>;
<#  }  #>
        }
<#  foreach(var resolver in Factory.Resolvers){ #>

        public <#= resolver.ReturnType.Name #> <#= resolver.MethodName #>(<#= resolver.GetParameterList() #>)
        {
<#      if(resolver.TryGetDelegation(Factory, out var code)) { #>
            return <#= code #>;
<#      } else if(resolver.IsTransient) { #>
            return new <#= resolver.ResolutionName #>(<#= resolver.GetInstantiationArgList(Factory.Injection) #>);
<#      } else { #>
            return <#= resolver.CacheVarName #> ??= new <#= resolver.ResolutionName #>(<#= resolver.GetInstantiationArgList(Factory.Injection) #>);
<#      }  #>
        }
<#  } #>

<#  foreach(var resolver in Factory.CollectionResolvers) { #>
        public IEnumerable<<#= resolver.ElementTypeName #>> <#= resolver.MethodName #>(<#= resolver.GetParameterList() #>)
        {
            return new <#= resolver.ElementTypeName #>[]
            {
                <#= resolver.GetElementList(Factory.Injection) #>
            };
        }
<#  }  #>

<#  if(Factory.DoSupportGenericHost) {  #>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddTransient<<#= Factory.TypeName #>>(provider => this);
<#      foreach(var item in Factory.GetResolverExpressionsForGenericHost()) {  #>
            services.AddTransient<<#= item.typeName #>>(provider => <#= item.expression #>);
<#      }  #>
        }
<#  }  #>
        
        public void Dispose()
        {
<#  foreach(var resolver in Factory.Resolvers) {
        if(resolver.GetRequireDispose(Factory)) { #>
            <#= resolver.CacheVarName #>?.Dispose();
<#      }
    } #>
        }
    }
}